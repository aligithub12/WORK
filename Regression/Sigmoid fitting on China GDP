{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b54fe747-c87a-45c2-9b31-9c32154d463e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2023-09-02 12:31:35 URL:https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/china_gdp.csv [1218/1218] -> \"china_gdp.csv\" [1]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1960</td>\n",
       "      <td>5.918412e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1961</td>\n",
       "      <td>4.955705e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1962</td>\n",
       "      <td>4.668518e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1963</td>\n",
       "      <td>5.009730e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1964</td>\n",
       "      <td>5.906225e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year         Value\n",
       "0  1960  5.918412e+10\n",
       "1  1961  4.955705e+10\n",
       "2  1962  4.668518e+10\n",
       "3  1963  5.009730e+10\n",
       "4  1964  5.906225e+10"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importing Libraries\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Downloading file\n",
    "!wget -nv -O china_gdp.csv https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/china_gdp.csv\n",
    "\n",
    "df = pd.read_csv(\"china_gdp.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b15d42db-5eed-4490-85f7-730f7f9d1194",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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r9fIkSMVGxurTp06acSIETp27Jj794cOHdL48ePldDrldDo1fvx4HT58uJXfXds73fb8z3/+I4fD0ei2aNEi93Wh0J6++NssLCzU+PHjlZSUpNjYWA0cOFDvvvuuxzWh0JaSb9pz165duv7669WlSxfFxcXp5ptv1oEDBzyuCYX2zMrK0kUXXaSOHTuqa9euGjt2rL7++muPayzL0syZM5WcnKx27dppxIgR+uqrrzyuqays1H333afOnTsrNjZW1113nfbt2+dxTbC3p6/a8g9/+INGjBihuLg4ORyORtsomNsy4MNIRUWF+vfvr9mzZzf4nWVZGjt2rHbv3q2//vWvysnJUWpqqr7//e+roqLCfd369et1zTXXKCMjQ5999pk+//xzTZkyxWPp2ttuu025ublatmyZli1bptzcXI0fP75N3mNbOt32TElJUUFBgcf2+OOPKzY2VqNGjXI/Vyi0py/+NsePH6+vv/5aH3zwgTZv3qwbbrhB48aNU05OjvuaUGhL6fTbs6KiQhkZGXI4HFq+fLnWrl2rqqoqjRkzRrW1te7nCoX2XLlype69915t2LBB2dnZqq6uVkZGhsff3jPPPKPnn39es2fP1ueff66kpCRdddVV7u8Kk6SpU6dq8eLFeuedd7RmzRodOXJE1157rWpqatzXBHt7+qotjx49qmuuuUa/+tWvmnytoG5LK4hIshYvXuz++euvv7YkWVu2bHGfq66utuLj460//vGP7nODBw+2ZsyY0eTzbt261ZJkbdiwwX1u/fr1liTr3//+t2/fhB9paXue6MILL7Tuuusu98+h2J4tbcvY2FjrjTfe8Hiu+Ph469VXX7UsKzTb0rJa1p7/+Mc/rLCwMKu0tNR9zcGDBy1JVnZ2tmVZodueRUVFliRr5cqVlmVZVm1trZWUlGQ99dRT7mu+++47y+l0Wi+//LJlWZZ1+PBhKzIy0nrnnXfc1+zfv98KCwuzli1bZllWaLZnS9qyvk8++cSSZB06dMjjfLC3ZcD3jJxMZWWlJCkmJsZ9Ljw8XFFRUVqzZo0kqaioSJ9++qm6du2qoUOHKjExUZdffrn795LpOXE6nRo8eLD73CWXXCKn06l169a10buxX3Pa80SbNm1Sbm6u7r77bvc52rP5bXnppZdq4cKFOnjwoGpra/XOO++osrJSI0aMkERbujSnPSsrK+VwODwWl4qJiVFYWJj7mlBtz9LSUklSfHy8JGnPnj0qLCxURkaG+5ro6Ghdfvnl7nbYtGmTjh8/7nFNcnKy0tLS3NeEYnu2pC2bI9jbMqjDSO/evZWamqrp06fr0KFDqqqq0lNPPaXCwkIVFBRIknbv3i1Jmjlzpn7yk59o2bJlGjhwoK688kr3eHNhYaG6du3a4Pm7du2qwsLCtntDNmtOe55o/vz56tOnj4YOHeo+R3s2vy0XLlyo6upqJSQkKDo6WpMmTdLixYt19tlnS6ItXZrTnpdccoliY2P10EMP6ejRo6qoqNCDDz6o2tpa9zWh2J6WZSkzM1OXXnqp0tLSJMn9XhMTEz2uTUxMdP+usLBQUVFROuOMM056TSi1Z0vbsjmCvS2DOoxERkbqvffe0/bt2xUfH6/27dtrxYoVGjVqlMLDwyXJPVY8adIk3XnnnRowYIBeeOEF9erVSwsWLHA/l8PhaPD8lmU1ej5YNac96zt27Jjeeustj14Rl1Bvz+a25YwZM3To0CF99NFH2rhxozIzM3XTTTdp8+bN7mtCvS2l5rVnly5dtGjRIv3tb39Thw4d5HQ6VVpaqoEDB3q0eai155QpU/Tll1/q7bffbvC7E99zc9rhxGtCqT193Zaneo6WPo8/irC7gNaWnp6u3NxclZaWqqqqSl26dNHgwYM1aNAgSVK3bt0kSeeff77H4/r06aO8vDxJUlJSUoMZ95L07bffNki7we5U7Vnfu+++q6NHj2rChAke52lP41RtuWvXLs2ePVtbtmxR3759JUn9+/fX6tWrNWfOHL388su0ZT3N+dvMyMjQrl27VFxcrIiICHXq1ElJSUnq2bOnpND727zvvvv0wQcfaNWqVerevbv7fFJSkiTzv3HXv5GSGdZ2tUNSUpKqqqp06NAhj96RoqIid09oKLXn6bRlcwR7WwZ1z0h9TqdTXbp00Y4dO7Rx40b98Ic/lCSdddZZSk5ObnAr1vbt25WamipJGjJkiEpLS/XZZ5+5f//pp5+qtLTUY/ghlDTVnvXNnz9f1113nbp06eJxnvb01FRbHj16VJI87uqSzFwIV48ebdlQc/42O3furE6dOmn58uUqKirSddddJyl02tOyLE2ZMkXvv/++li9f7g5jLj179lRSUpKys7Pd56qqqrRy5Up3O6SnpysyMtLjmoKCAm3ZssV9TSi0py/asjmCvi1tmTbrQ+Xl5VZOTo6Vk5NjSbKef/55Kycnx9q7d69lWZb1l7/8xfrkk0+sXbt2WUuWLLFSU1OtG264weM5XnjhBSsuLs5atGiRtWPHDmvGjBlWTEyMtXPnTvc111xzjXXBBRdY69evt9avX2/169fPuvbaa9v0vbYFX7SnZVnWjh07LIfDYX344YeNvk4otOfptmVVVZV1zjnnWMOHD7c+/fRTa+fOndazzz5rORwO6+9//7v7ulBoS8vyzd/mggULrPXr11s7d+60/vSnP1nx8fFWZmamxzWh0J4//elPLafTaa1YscIqKChwb0ePHnVf89RTT1lOp9N6//33rc2bN1u33nqr1a1bN6usrMx9zeTJk63u3btbH330kfXFF19YI0eOtPr3729VV1e7rwn29vRVWxYUFFg5OTnWH//4R0uStWrVKisnJ8cqKSlxXxPMbRnwYcR1G9SJ2x133GFZlmW9+OKLVvfu3a3IyEirR48e1owZM6zKysoGz5OVlWV1797dat++vTVkyBBr9erVHr8vKSmxbr/9dqtjx45Wx44drdtvv73BrVfBwFftOX36dKt79+5WTU1No68TCu3pi7bcvn27dcMNN1hdu3a12rdvb11wwQUNbvUNhba0LN+050MPPWQlJiZakZGR1rnnnms999xzVm1trcc1odCejbWjJOu1115zX1NbW2s99thjVlJSkhUdHW1ddtll1ubNmz2e59ixY9aUKVOs+Ph4q127dta1115r5eXleVwT7O3pq7Z87LHHTvk8wdyWDsuyrNbqdQEAADiVkJkzAgAA/BNhBAAA2IowAgAAbEUYAQAAtiKMAAAAWxFGAACArQgjAADAVoQRAABgK8IIAACwFWEEAADYijACAABsRRgBAAC2+v/JwxzFAFo4lwAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_data, y_data = (df['Year'].values,df['Value'].values)\n",
    "plt.plot(x_data,y_data,'r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "468237b4-bb59-40a7-a3bf-127b6d7cabc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize data\n",
    "xdata = x_data/max(x_data)\n",
    "ydata = y_data/max(y_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1cd09970-af2d-4814-ba46-44bbdac29c0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining Sigmoid\n",
    "def sigmoid(x,Beta_1,Beta_2):\n",
    "    y = 1 / (1 + np.exp(-Beta_1*(x-Beta_2)))\n",
    "    return y\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0f528def-e157-4a19-9a56-54f0d888d331",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/lib/python3/dist-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.17.3 and <1.25.0 is required for this version of SciPy (detected version 1.25.1\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[690.45170921   0.99720713]\n"
     ]
    }
   ],
   "source": [
    "#Optimizing sigmoid with our data\n",
    "\n",
    "from scipy.optimize import curve_fit\n",
    "popt, pcov = curve_fit(sigmoid,xdata, ydata)\n",
    "print(popt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "65d40483-83f5-445c-b27e-21f03d1b0c64",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Putting optimized values in Sigmoid\n",
    "yy = sigmoid(xdata, *popt)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9867d2c5-a079-41f9-9e81-97d65b43d706",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting Optimized Sigmoid with our data\n",
    "plt.plot(xdata, yy, 'r')\n",
    "plt.plot(xdata, ydata, 'blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "20a9d661-2e1d-410b-8b13-1f823040e398",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/lib/python3/dist-packages/scipy/optimize/_minpack_py.py:833: OptimizeWarning: Covariance of the parameters could not be estimated\n",
      "  warnings.warn('Covariance of the parameters could not be estimated',\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error: 0.35\n",
      "Residual sum of squares (MSE): 0.24\n",
      "R2-score: -1.08\n"
     ]
    }
   ],
   "source": [
    "#ACCURACY\n",
    "\n",
    "# split data into train/test\n",
    "msk = np.random.rand(len(df)) < 0.8\n",
    "train_x = xdata[msk]\n",
    "test_x = xdata[~msk]\n",
    "train_y = ydata[msk]\n",
    "test_y = ydata[~msk]\n",
    "\n",
    "# build the model using train set\n",
    "popt, pcov = curve_fit(sigmoid, train_x, train_y)\n",
    "\n",
    "# predict using test set\n",
    "y_hat = sigmoid(test_x, *popt)\n",
    "\n",
    "# evaluation\n",
    "print(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_hat - test_y)))\n",
    "print(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_hat - test_y) ** 2))\n",
    "from sklearn.metrics import r2_score\n",
    "print(\"R2-score: %.2f\" % r2_score(test_y,y_hat) )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3476660-299e-415f-af4e-7d7c806cbcc9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
